# pod example with resource limit, liveness and resdiness, init containters, and lifycycle
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-full-config
  labels:
    run: pod-full
data:
  default.conf: |
    server {
      listen       80;
      server_name  localhost;

      #charset koi8-r;
      #access_log  /var/log/nginx/host.access.log  main;

      location / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
      }

      location /liveness {
          default_type text/html;
          return 200 "You $remote_addr:$remote_port - me $server_addr:$server_port $server_name - at $time_local\n";
      }

      location /ready {
          default_type text/html;
          return 200 "Hello! I got your URI request - $request_uri\n";
      }


      #error_page  404              /404.html;

      # redirect server error pages to the static page /50x.html
      #
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
      }

      # proxy the PHP scripts to Apache listening on 127.0.0.1:80
      #
      #location ~ \.php$ {
      #    proxy_pass   http://127.0.0.1;
      #}

      # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
      #
      #location ~ \.php$ {
      #    root           html;
      #    fastcgi_pass   127.0.0.1:9000;
      #    fastcgi_index  index.php;
      #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
      #    include        fastcgi_params;
      #}

      # deny access to .htaccess files, if Apache's document root
      # concurs with nginx's one
      #
      #location ~ /\.ht {
      #    deny  all;
      #}
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-full-pages
  labels:
    run: pod-full
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head><title>Welcome to nginx!</title></head>
    <body>
    <h1>Welcome to nginx!</h1>
    <p>nginx /</p>
    </body>
    </html>

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-full
  labels:
    run: pod-full
spec:
  initContainers:
    - name: sysctl
      image: alpine:3.10
      securityContext:
          privileged: true
      command: ['sh', '-c', "sysctl -w net.core.somaxconn=32768"]
  containers:
  - name: app
    image: nginx:1.14.2
    ports:
    - containerPort: 80
    volumeMounts:
    - name: config-volume
      mountPath: /etc/nginx/conf.d
    - name: data-volume
      mountPath: /usr/share/nginx/html
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "1024Mi"
        cpu: "500m"
    livenessProbe:
      httpGet:
        path: /liveness
        port: 80
        httpHeaders:
      initialDelaySeconds: 3
      periodSeconds: 3
    readinessProbe:
      httpGet:
        path: /ready
        port: 80
      initialDelaySeconds: 3
      periodSeconds: 3
    lifecycle:
      postStart:
        exec:
          command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
      preStop:
        exec:
          command: ["/bin/sh","-c","nginx -s quit; while killall -0 nginx; do sleep 1; done"]
  volumes:
    - name: config-volume
      configMap:
        name: pod-full-config
    - name: data-volume
      configMap:
        name: pod-full-pages


